{"version":3,"sources":["components/DataStreamer.ts","components/DataManipulator.ts","components/graph/Graph.tsx","App.tsx","index.tsx"],"names":["DataStreamer","callback","request","XMLHttpRequest","open","API_URL","onload","status","JSON","parse","responseText","alert","send","DataManipulator","Object","classCallCheck","this","createClass","key","value","serverRespond","priceStockABC","top_ask","price","top_bid","priceStockDEF","ratio","triggerCondition","price_abc","price_def","timestamp","upper_bound","lower_bound","trigger_alert","undefined","Graph","table","React","createElement","elem","document","getElementsByTagName","window","perspective","worker","load","setAttribute","stringify","update","generateRow","props","data","Component","App","_this","possibleConstructorReturn","getPrototypeOf","call","state","showGraph","react_default","a","components_graph_Graph","_this2","x","interval","setInterval","getData","serverResponds","setState","clearInterval","_this3","className","onClick","getDataFromServer","renderGraph","ReactDOM","render","src_App_0","getElementById"],"mappings":"sOAGMA,uGAGWC,GACb,IAAMC,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAOJ,EAAaK,SAAS,GAE1CH,EAAQI,OAAS,WACQ,MAAnBJ,EAAQK,OACVN,EAASO,KAAKC,MAAMP,EAAQQ,eAE5BC,MAAO,mBAIXT,EAAQU,gBAfNZ,EACGK,QAAkB,mCAkBZL,QCnBFa,EAAb,oBAAAA,IAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAA,OAAAC,OAAAG,EAAA,EAAAH,CAAAD,EAAA,OAAAK,IAAA,cAAAC,MAAA,SACqBC,GAEjB,IAAMC,GAAiBD,EAAc,GAAGE,QAAQC,MAAQH,EAAc,GAAGI,QAAQD,OAAS,EACpFE,GAAiBL,EAAc,GAAGE,QAAQC,MAAQH,EAAc,GAAGI,QAAQD,OAAS,EACpFG,EAAQL,EAAgBI,EAKxBE,EAAmBD,EAFL,KAE4BA,EAH/B,KAKjB,MAAO,CACHE,UAAWP,EACXQ,UAAWJ,EACXC,QACAI,UAAWV,EAAc,GAAGU,UAAYV,EAAc,GAAGU,UACrDV,EAAc,GAAGU,UAAYV,EAAc,GAAGU,UAClDC,YAXa,KAYbC,YAXgB,IAYhBC,cAAeN,EAAmBD,OAAQQ,OApBlDrB,EAAA,GCsDesB,oNAlDXC,qFAGI,OAAOC,IAAMC,cAAc,kEAK3B,IAAMC,EAAOC,SAASC,qBAAqB,sBAAsB,GAY7DC,OAAOC,aAAeD,OAAOC,YAAYC,WACzC5B,KAAKoB,MAAQM,OAAOC,YAAYC,SAASR,MAX9B,CACXR,UAAW,QACXC,UAAW,QACXH,MAAO,QACPI,UAAW,OACXC,YAAa,QACbC,YAAa,QACbC,cAAe,WAMfjB,KAAKoB,QAELG,EAAKM,KAAK7B,KAAKoB,OACfG,EAAKO,aAAa,OAAQ,UAC1BP,EAAKO,aAAa,aAAc,iBAChCP,EAAKO,aAAa,UAAW,4DAC7BP,EAAKO,aAAa,aAActC,KAAKuC,UAAU,CAC3CnB,UAAW,MACXC,UAAW,MACXH,MAAO,MACPI,UAAW,iBACXC,YAAa,MACbC,YAAa,MACbC,cAAe,uDAMnBjB,KAAKoB,OACLpB,KAAKoB,MAAMY,OAAO,CACdnC,EAAgBoC,YAAYjC,KAAKkC,MAAMC,eA7CnCC,cCmDLC,qBAjDb,SAAAA,EAAYH,GAAW,IAAAI,EAAA,OAAAxC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IACrBC,EAAAxC,OAAAyC,EAAA,EAAAzC,CAAAE,KAAAF,OAAA0C,EAAA,EAAA1C,CAAAuC,GAAAI,KAAAzC,KAAMkC,KACDQ,MAAQ,CACXP,KAAM,GACNQ,WAAW,GAJQL,6EASrB,GAAItC,KAAK0C,MAAMC,UACb,OAAQC,EAAAC,EAAAvB,cAACwB,EAAD,CAAOX,KAAMnC,KAAK0C,MAAMP,mDAIhB,IAAAY,EAAA/C,KACdgD,EAAI,EACFC,EAAWC,YAAY,WAC3BlE,EAAamE,QAAQ,SAACC,GAEpBL,EAAKM,SAAS,CACZlB,KAAMiB,EACNT,WAAW,QAIfK,EACQ,KACNM,cAAcL,IAEf,sCAGI,IAAAM,EAAAvD,KACP,OACE4C,EAAAC,EAAAvB,cAAA,OAAKkC,UAAU,OACbZ,EAAAC,EAAAvB,cAAA,UAAQkC,UAAU,cAAlB,0BAGAZ,EAAAC,EAAAvB,cAAA,OAAKkC,UAAU,eACbZ,EAAAC,EAAAvB,cAAA,UAAQkC,UAAU,gCAAgCC,QAAS,WAAOF,EAAKG,sBAAvE,wBACAd,EAAAC,EAAAvB,cAAA,OAAKkC,UAAU,SACZxD,KAAK2D,wBA1CAvB,0BCGlBwB,IAASC,OAAOjB,EAAAC,EAAAvB,cAACwC,EAAD,MAAStC,SAASuC,eAAe","file":"static/js/main.b3f3af85.chunk.js","sourcesContent":["import { ServerRespond } from \"../interfaces/data-streamer.interfaces\";\n\n\nclass DataStreamer {\n  static API_URL: string = 'http://localhost:8080/query?id=1';\n\n  static getData(callback: (data: ServerRespond[]) => void): void {\n    const request = new XMLHttpRequest();\n    request.open('GET', DataStreamer.API_URL, false);\n\n    request.onload = () => {\n      if (request.status === 200) {\n        callback(JSON.parse(request.responseText));\n      } else {\n        alert ('Request failed');\n      }\n    }\n\n    request.send();\n  }\n}\n\nexport default DataStreamer;","import { RowApiToVm } from \"../interfaces/data-manipulator.interfaces\";\nimport { ServerRespond } from \"../interfaces/data-streamer.interfaces\";\n\nexport class DataManipulator {\n  static generateRow(serverRespond: ServerRespond[]): RowApiToVm {\n    // to calculate ratio we need the mean prices of the stocks\n    const priceStockABC = (serverRespond[0].top_ask.price + serverRespond[0].top_bid.price) / 2;\n    const priceStockDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price) / 2;\n    const ratio = priceStockABC / priceStockDEF;\n\n    const boundTop = 1 + 0.05;\n    const boundBottom = 1 - 0.05;\n\n    const triggerCondition = ratio < boundBottom || ratio > boundTop \n\n    return {\n        price_abc: priceStockABC,\n        price_def: priceStockDEF,\n        ratio,\n        timestamp: serverRespond[0].timestamp > serverRespond[1].timestamp ?\n            serverRespond[0].timestamp : serverRespond[1].timestamp,\n        upper_bound: boundTop,\n        lower_bound: boundBottom,\n        trigger_alert: triggerCondition ? ratio : undefined,\n    };\n}\n}\n","import React, {Component} from 'react';\nimport {Table, TableData} from '@finos/perspective';\nimport {DataManipulator} from '../DataManipulator';\nimport './Graph.css';\nimport { IProps, PerspectiveViewerElement } from '../../interfaces/graph.interfaces';\n\nclass Graph extends Component<IProps, {}> {\n    table: Table | undefined;\n\n    render() {\n        return React.createElement('perspective-viewer');\n    }\n\n    componentDidMount() {\n        // Get element from the DOM.\n        const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;\n\n        const schema = {\n            price_abc: 'float',\n            price_def: 'float',\n            ratio: 'float',\n            timestamp: 'date',\n            upper_bound: 'float',\n            lower_bound: 'float',\n            trigger_alert: 'float'\n        };\n\n        if (window.perspective && window.perspective.worker()) {\n            this.table = window.perspective.worker().table(schema);\n        }\n        if (this.table) {\n            // Load the `table` in the `<perspective-viewer>` DOM reference.\n            elem.load(this.table);\n            elem.setAttribute('view', 'y_line');\n            elem.setAttribute('row-pivots', '[\"timestamp\"]');\n            elem.setAttribute('columns', '[\"ratio\", \"lower_bound\", \"upper_bound\", \"trigger_alert\"]');\n            elem.setAttribute('aggregates', JSON.stringify({\n                price_abc: 'avg',\n                price_def: 'avg',\n                ratio: 'avg',\n                timestamp: 'distinct count',\n                upper_bound: 'avg',\n                lower_bound: 'avg',\n                trigger_alert: 'avg'\n            }));\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.table) {\n            this.table.update([\n                DataManipulator.generateRow(this.props.data),\n            ] as unknown as TableData);\n        }\n    }\n}\n\nexport default Graph;","import React, { Component } from 'react';\nimport DataStreamer from './components/DataStreamer';\nimport Graph from './components/graph/Graph';\nimport './App.css';\nimport { ServerRespond } from './interfaces/data-streamer.interfaces';\nimport { IState } from './interfaces/app.interfaces';\n\nclass App extends Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      data: [],\n      showGraph: false,\n    };\n  }\n\n  renderGraph() {\n    if (this.state.showGraph) {\n      return (<Graph data={this.state.data}/>)\n    }\n  }\n\n  getDataFromServer() {\n    let x = 0;\n    const interval = setInterval(() => {\n      DataStreamer.getData((serverResponds: ServerRespond[]) => {\n\n        this.setState({\n          data: serverResponds,\n          showGraph: true,\n        });\n        //console.log(`${serverResponds}`)\n      });\n      x++;\n      if (x > 1000) {\n        clearInterval(interval);\n      }\n    }, 100);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Bank Merge & Co Task 3\n        </header>\n        <div className=\"App-content\">\n          <button className=\"btn btn-primary Stream-button\" onClick={() => {this.getDataFromServer()}}>Start Streaming Data</button>\n          <div className=\"Graph\">\n            {this.renderGraph()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\ndeclare global {\n  interface Window { perspective: any; }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}